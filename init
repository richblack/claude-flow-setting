#!/bin/bash

# Claude Flow 極簡一鍵設定
# 使用方式：~/claude-flow-setting/init
# 自動判斷是新專案還是現有專案

set -e

CURRENT_DIR=$(basename "$(pwd)")
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

echo "🌊 Claude Flow 極簡設定"
echo ""

# 檢測通知工具
detect_notifier() {
    if command -v terminal-notifier >/dev/null 2>&1; then
        echo "terminal-notifier"
    elif command -v notify-send >/dev/null 2>&1; then
        echo "notify-send"
    else
        echo "none"
    fi
}

NOTIFIER=$(detect_notifier)

# 提示安裝通知工具
if [[ "$NOTIFIER" == "none" ]]; then
    echo "⚠️  建議安裝通知工具以獲得最佳體驗："
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "   macOS: brew install terminal-notifier"
    else
        echo "   Linux: sudo apt-get install libnotify-bin"
    fi
    echo ""
fi

# 自動判斷場景
if [[ -f "CLAUDE.md" ]] || [[ -d ".claude" ]] || [[ -d "rfp" ]]; then
    echo "⚠️  此專案似乎已經設定過 Claude Flow"
    read -p "是否要重新設定？(y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "❌ 取消設定"
        exit 0
    fi
fi

echo "🔧 在專案 '$CURRENT_DIR' 中設定..."

# 初始化 git（如果需要）
if [[ ! -d ".git" ]]; then
    git init -q
    echo "✓ 初始化 Git"
fi

# 1. 創建目錄結構
echo "📁 創建專案目錄結構..."

PROJ_NAME="$CURRENT_DIR"

# 創建用戶需求目錄
mkdir -p user-requirements/references
mkdir -p user-requirements/mockups
mkdir -p user-requirements/docs

# 創建 RFP 目錄（Claude 自動產生的文件）
mkdir -p rfp

# 創建用戶需求範本（只在不存在時）
if [[ ! -f "user-requirements/initial-requirements.md" ]]; then
    cat > user-requirements/initial-requirements.md << EOF
# $PROJ_NAME - 需求說明

> 這是您的需求文件，用自然語言描述您想要的功能。
> Claude 會讀取這個檔案，產生正式的規格文件到 \`rfp/\` 目錄。

## 🎯 專案目標

[簡要描述這個專案要解決什麼問題]

## 💡 功能想法

### 我希望系統能夠...

1. [用自然語言描述功能 1]
2. [用自然語言描述功能 2]
3. [用自然語言描述功能 3]

### 使用情境

[描述用戶如何使用這個系統]

## 🛠 技術偏好（可選）

- **語言/框架**: [如果有偏好]
- **資料庫**: [如果有偏好]
- **部署環境**: [如果有偏好]

## 📎 參考資料

- 可以將參考文件放在 \`user-requirements/references/\`
- 可以將 UI 設計稿放在 \`user-requirements/mockups/\`
- 可以將其他文件放在 \`user-requirements/docs/\`

---

**下一步**：
1. 編輯完成後，告訴 Claude：「請執行 /vibe-coding」
2. Claude 會根據這個檔案產生正式規格到 \`rfp/\` 目錄
EOF
    echo "✓ 已創建 user-requirements/initial-requirements.md"
else
    echo "⏭️  user-requirements/initial-requirements.md 已存在，跳過（保留您的內容）"
fi

# 創建 README 說明目錄用途
if [[ ! -f "user-requirements/README.md" ]]; then
    cat > user-requirements/README.md << 'EOF'
# user-requirements/ 目錄說明

這個目錄存放**您的原始需求和參考資料**。

## 📁 目錄結構

```
user-requirements/
├── initial-requirements.md  # 您用自然語言寫的需求
├── references/              # 參考文件（PDF、文章連結等）
├── mockups/                 # UI/UX 設計稿、wireframes
└── docs/                    # 其他相關文件
```

## 🔄 與 rfp/ 的關係

- **user-requirements/** = 您寫的內容（輸入）
- **rfp/** = Claude 產生的規格文件（輸出）

## 💡 使用方式

1. 在 `initial-requirements.md` 用自然語言描述需求
2. 將參考資料放到對應的子目錄
3. 執行 `/vibe-coding` 讓 Claude 產生正式規格
4. Claude 會將結果寫入 `rfp/` 目錄

## ⚠️ 重要

- 這個目錄的內容**不會被 Claude 覆蓋**
- 您可以隨時修改和新增內容
- Claude 只會讀取，不會修改這裡的檔案
EOF
    echo "✓ 已創建 user-requirements/README.md"
fi

echo "✓ 目錄結構創建完成"

# 2. 創建 .claude 目錄和 settings.json（配置通知 hooks）
echo "⚙️  配置 Claude Code 通知..."
mkdir -p .claude

# 根據偵測到的通知工具創建配置
if [[ "$NOTIFIER" == "terminal-notifier" ]]; then
    NOTIFY_CMD='terminal-notifier -message \"Claude Code 需要您的注意\" -title \"Claude Code\" -sound default'
    STOP_CMD='terminal-notifier -message \"任務已完成\" -title \"Claude Code\" -sound default'
elif [[ "$NOTIFIER" == "notify-send" ]]; then
    NOTIFY_CMD='notify-send "Claude Code" "需要您的注意"'
    STOP_CMD='notify-send "Claude Code" "任務已完成"'
else
    # 回退到簡單的 echo
    NOTIFY_CMD='echo "🔔 Claude Code 需要您的注意"'
    STOP_CMD='echo "✅ 任務已完成"'
fi

cat > .claude/settings.json << EOF
{
  "hooks": {
    "Notification": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "$NOTIFY_CMD"
          }
        ]
      }
    ],
    "Stop": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "$STOP_CMD"
          }
        ]
      }
    ]
  },
  "permissions": {
    "allow": [
      "Bash(terminal-notifier:*)",
      "Bash(notify-send:*)"
    ]
  }
}
EOF

echo "✓ 已配置通知 hooks"

# 2.5. 複製 vibe-coding 指令
echo "📋 安裝 /vibe-coding 指令..."
mkdir -p .claude/commands

# 從 claude-flow-setting 複製 vibe-coding.md
if [[ -f "$SCRIPT_DIR/.claude/commands/vibe-coding.md" ]]; then
    cp "$SCRIPT_DIR/.claude/commands/vibe-coding.md" .claude/commands/
    echo "✓ 已安裝 /vibe-coding 指令"
else
    echo "⚠️  找不到 vibe-coding.md（可能需要更新 claude-flow-setting）"
fi

# 3. 創建 CLAUDE.md（專案級別的 Claude 指令）
echo "📝 創建 CLAUDE.md..."

# 只在檔案不存在時才創建
if [[ ! -f "CLAUDE.md" ]]; then
    cat > CLAUDE.md << 'EOF'
# Claude Flow 開發指南

## 🎯 開發流程

### 1. 開始前必讀
- **永遠先閱讀 `rfp/` 目錄**：理解需求後再開始開發
- **使用記憶系統**：重要決策和進度都要記錄

### 2. 標準開發流程

```bash
# 啟動時 - 恢復記憶
claude-flow memory recall "*"

# 閱讀需求
# 請仔細閱讀 rfp/ 目錄中的所有需求文件

# 規劃架構
claude-flow sparc run architect "根據 rfp/ 需求設計架構"

# 開始開發
claude-flow sparc run coder "實作功能"

# 測試
claude-flow sparc run tdd "建立測試"

# 結束時 - 保存記憶
claude-flow memory store "progress" "今日完成：XXX"
```

## 🔔 通知規則

### 何時必須主動詢問用戶

1. **需要決策時**
   - 多種實作方案可選擇
   - 架構設計的重要決定
   - 技術棧選擇

2. **遇到阻礙時**
   - 錯誤無法自行解決
   - 需求不清楚
   - 測試失敗且原因不明

3. **完成階段性任務時**
   - 完成一個主要功能
   - 完成測試
   - 準備部署

### 通知方式

當需要用戶注意時：
- 系統會自動彈出通知（透過 hooks）
- 在訊息中明確說明需要什麼
- 等待用戶回應後再繼續

## 📋 最佳實踐

### Do ✅
- 先讀 rfp/ 再動手
- 重要決策記錄到 memory
- 需要確認時主動詢問
- 階段完成後通知用戶

### Don't ❌
- 不要假設需求，有疑問就問
- 不要跳過測試
- 不要在不確定時繼續開發
- 不要忘記保存記憶

## 💾 記憶系統使用

```bash
# 保存架構決策
claude-flow memory store "architecture" "使用 微服務架構，API Gateway + 3個服務"

# 保存技術棧
claude-flow memory store "tech-stack" "Node.js + PostgreSQL + Redis"

# 保存進度
claude-flow memory store "progress" "完成用戶認證模組"

# 保存問題
claude-flow memory store "issues" "資料庫連線池需要優化"

# 查詢特定記憶
claude-flow memory query "architecture"

# 恢復所有記憶
claude-flow memory recall "*"
```

## 🚨 特別注意

1. **上下文壓縮後的恢復**
   - 如果忘記之前的工作，立即執行：`claude-flow memory recall "*"`
   - 重新閱讀 `rfp/requirements.md`

2. **長時間執行的任務**
   - 定期報告進度
   - 階段完成時通知用戶

3. **需要用戶介入**
   - 系統會自動觸發通知
   - 明確說明需要什麼決策或行動

---

**記住**：通知功能已透過 `.claude/settings.json` 的 hooks 配置，
不受上下文壓縮影響，會穩定運作！
EOF
    echo "✓ 已創建 CLAUDE.md"
else
    echo "⏭️  CLAUDE.md 已存在，跳過（保留您的內容）"
fi

# 4. 創建 .gitignore（如果不存在）
if [[ ! -f ".gitignore" ]]; then
    cat > .gitignore << EOF
# Claude Flow
.roomodes
.claude/settings.local.json

# 環境變數
.env
.env.local

# 依賴
node_modules/
venv/
__pycache__/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db
EOF
    echo "✓ 已創建 .gitignore"
fi

# 5. 創建簡單的 README（如果不存在）
if [[ ! -f "README.md" ]]; then
    cat > README.md << EOF
# $PROJ_NAME

> Claude Flow 開發專案 - 使用 Vibe Coding 工作流程

## 🚀 快速開始

1. **編輯需求**: \`user-requirements/initial-requirements.md\`
2. **執行 Vibe Coding**: 在 Claude Code 中執行 \`/vibe-coding\`
3. **查看生成的規格**: 檢視 \`rfp/\` 目錄中的文件
4. **開始開發**: 告訴 Claude「請根據 rfp/ 開始開發」

## 📁 專案結構

\`\`\`
$PROJ_NAME/
├── user-requirements/         # 您的需求和參考資料（輸入）
│   ├── initial-requirements.md
│   ├── references/            # 參考文件
│   ├── mockups/               # UI 設計稿
│   └── docs/                  # 其他文件
├── rfp/                       # AI 產生的規格文件（輸出）
│   ├── requirements.md        # User Stories + EARS 驗收標準
│   ├── design.md              # 系統設計文件
│   └── tasks.md               # 任務分解清單
├── CLAUDE.md                  # Claude 開發指南
├── .claude/                   # Claude Code 設定
│   ├── settings.json          # 通知 hooks 配置
│   └── commands/
│       └── vibe-coding.md     # Vibe Coding 工作流程
└── README.md
\`\`\`

## 🌟 Vibe Coding 工作流程

Vibe Coding 是從自然語言需求到可執行任務的完整工作流程：

1. **理解需求** - 編寫 \`user-requirements/initial-requirements.md\`
2. **User Story Mapping** - 產生使用者故事
3. **EARS 驗收標準** - 為每個故事新增驗收標準
4. **系統設計** - 建立架構和元件設計
5. **任務分解** - 產生詳細的實作任務

執行 \`/vibe-coding\` 開始此工作流程。

## 💡 開發流程

\`\`\`bash
# 1. 恢復記憶（如果是舊專案）
claude-flow memory recall "*"

# 2. 執行 Vibe Coding（新功能或專案）
# 在 Claude Code 中輸入: /vibe-coding

# 3. 根據生成的規格開始開發
# 告訴 Claude: 請根據 rfp/tasks.md 開始實作

# 4. 保存進度
claude-flow memory store "progress" "完成 XXX 功能"
\`\`\`

## 🔔 通知系統

- ✅ 系統會在需要您注意時自動彈出通知
- ✅ 不受上下文壓縮影響
- ✅ 穩定可靠

## 📚 更多資訊

- 查看 \`CLAUDE.md\` 了解詳細開發流程
- 查看 \`user-requirements/README.md\` 了解需求目錄用途
- 查看 \`rfp/README.md\` 了解 Vibe Coding 工作流程

---

使用 [Claude Flow Setting](https://github.com/richblack/claude-flow-setting) 開發
EOF
    echo "✓ 已創建 README.md"
fi

echo ""
echo "✅ 設定完成！"
echo ""
echo "📁 專案位置: $(pwd)"
echo ""

if [[ "$NOTIFIER" == "none" ]]; then
    echo "💡 提示：通知功能已配置但需要安裝通知工具："
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "   執行: brew install terminal-notifier"
    else
        echo "   執行: sudo apt-get install libnotify-bin"
    fi
    echo ""
fi

echo "🎯 下一步："
echo "1. 編輯 user-requirements/initial-requirements.md 描述您的需求"
echo "2. 在 Claude Code 中開啟此目錄"
echo "3. 執行 /vibe-coding 讓 Claude 產生規格文件到 rfp/"
echo ""
echo "📖 更多資訊："
echo "   - 查看 CLAUDE.md 了解開發流程"
echo "   - 查看 user-requirements/README.md 了解目錄用途"
echo ""

